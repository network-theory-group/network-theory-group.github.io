
@inproceedings{chowdhury_efficient_2014,
	address = {Chicago, Illinois, USA},
	title = {Efficient coflow scheduling with {Varys}},
	isbn = {978-1-4503-2836-4},
	url = {http://dl.acm.org/citation.cfm?doid=2619239.2626315},
	doi = {10.1145/2619239.2626315},
	abstract = {Communication in data-parallel applications often involves a collection of parallel ﬂows. Traditional techniques to optimize ﬂowlevel metrics do not perform well in optimizing such collections, because the network is largely agnostic to application-level requirements. The recently proposed coﬂow abstraction bridges this gap and creates new opportunities for network scheduling. In this paper, we address inter-coﬂow scheduling for two different objectives: decreasing communication time of data-intensive jobs and guaranteeing predictable communication time. We introduce the concurrent open shop scheduling with coupled resources problem, analyze its complexity, and propose effective heuristics to optimize either objective. We present Varys, a system that enables data-intensive frameworks to use coﬂows and the proposed algorithms while maintaining high network utilization and guaranteeing starvation freedom. EC2 deployments and trace-driven simulations show that communication stages complete up to 3.16× faster on average and up to 2× more coﬂows meet their deadlines using Varys in comparison to per-ﬂow mechanisms. Moreover, Varys outperforms non-preemptive coﬂow schedulers by more than 5×.},
	language = {en},
	urldate = {2018-12-14},
	booktitle = {Proceedings of the 2014 {ACM} conference on {SIGCOMM} - {SIGCOMM} '14},
	publisher = {ACM Press},
	author = {Chowdhury, Mosharaf and Zhong, Yuan and Stoica, Ion},
	year = {2014},
	pages = {443--454},
	file = {Chowdhury et al. - 2014 - Efficient coflow scheduling with Varys.pdf:files/820/Chowdhury et al. - 2014 - Efficient coflow scheduling with Varys.pdf:application/pdf}
}

@inproceedings{chowdhury_coflow:_2012,
	address = {Redmond, Washington},
	title = {Coflow: a networking abstraction for cluster applications},
	isbn = {978-1-4503-1776-4},
	shorttitle = {Coflow},
	url = {http://dl.acm.org/citation.cfm?doid=2390231.2390237},
	doi = {10.1145/2390231.2390237},
	abstract = {Cluster computing applications – frameworks like MapReduce and user-facing applications like search platforms –have application-level requirements and higher-level abstractions to express them. However, there exists no networking abstraction that can take advantage of the rich semantics readily available from these data parallel applications.},
	language = {en},
	urldate = {2018-12-14},
	booktitle = {Proceedings of the 11th {ACM} {Workshop} on {Hot} {Topics} in {Networks} - {HotNets}-{XI}},
	publisher = {ACM Press},
	author = {Chowdhury, Mosharaf and Stoica, Ion},
	year = {2012},
	pages = {31--36},
	file = {Chowdhury and Stoica - 2012 - Coflow a networking abstraction for cluster appli.pdf:files/821/Chowdhury and Stoica - 2012 - Coflow a networking abstraction for cluster appli.pdf:application/pdf}
}

@inproceedings{chowdhury_efficient_2015,
	address = {London, United Kingdom},
	title = {Efficient {Coflow} {Scheduling} {Without} {Prior} {Knowledge}},
	isbn = {978-1-4503-3542-3},
	url = {http://dl.acm.org/citation.cfm?doid=2785956.2787480},
	doi = {10.1145/2785956.2787480},
	abstract = {Inter-coﬂow scheduling improves application-level communication performance in data-parallel clusters. However, existing efﬁcient schedulers require a priori coﬂow information and ignore cluster dynamics like pipelining, task failures, and speculative executions, which limit their applicability. Schedulers without prior knowledge compromise on performance to avoid head-of-line blocking. In this paper, we present Aalo that strikes a balance and efﬁciently schedules coﬂows without prior knowledge.},
	language = {en},
	urldate = {2018-12-14},
	booktitle = {Proceedings of the 2015 {ACM} {Conference} on {Special} {Interest} {Group} on {Data} {Communication} - {SIGCOMM} '15},
	publisher = {ACM Press},
	author = {Chowdhury, Mosharaf and Stoica, Ion},
	year = {2015},
	pages = {393--406},
	file = {Chowdhury and Stoica - 2015 - Efficient Coflow Scheduling Without Prior Knowledg.pdf:files/822/Chowdhury and Stoica - 2015 - Efficient Coflow Scheduling Without Prior Knowledg.pdf:application/pdf}
}

@inproceedings{chowdhury_efficient_2014-1,
	address = {Chicago, Illinois, USA},
	title = {Efficient coflow scheduling with {Varys}},
	isbn = {978-1-4503-2836-4},
	url = {http://dl.acm.org/citation.cfm?doid=2619239.2626315},
	doi = {10.1145/2619239.2626315},
	abstract = {Communication in data-parallel applications often involves a collection of parallel ﬂows. Traditional techniques to optimize ﬂowlevel metrics do not perform well in optimizing such collections, because the network is largely agnostic to application-level requirements. The recently proposed coﬂow abstraction bridges this gap and creates new opportunities for network scheduling. In this paper, we address inter-coﬂow scheduling for two different objectives: decreasing communication time of data-intensive jobs and guaranteeing predictable communication time. We introduce the concurrent open shop scheduling with coupled resources problem, analyze its complexity, and propose effective heuristics to optimize either objective. We present Varys, a system that enables data-intensive frameworks to use coﬂows and the proposed algorithms while maintaining high network utilization and guaranteeing starvation freedom. EC2 deployments and trace-driven simulations show that communication stages complete up to 3.16× faster on average and up to 2× more coﬂows meet their deadlines using Varys in comparison to per-ﬂow mechanisms. Moreover, Varys outperforms non-preemptive coﬂow schedulers by more than 5×.},
	language = {en},
	urldate = {2018-12-14},
	booktitle = {Proceedings of the 2014 {ACM} conference on {SIGCOMM} - {SIGCOMM} '14},
	publisher = {ACM Press},
	author = {Chowdhury, Mosharaf and Zhong, Yuan and Stoica, Ion},
	year = {2014},
	pages = {443--454},
	file = {Chowdhury et al. - 2014 - Efficient coflow scheduling with Varys.pdf:files/823/Chowdhury et al. - 2014 - Efficient coflow scheduling with Varys.pdf:application/pdf}
}

@inproceedings{jajoo_saath:_2017,
	title = {Saath: {Speeding} up {CoFlows} by {Exploiting} the {Spatial} {Dimension}},
	isbn = {978-1-4503-5422-6},
	shorttitle = {Saath},
	url = {http://dl.acm.org/citation.cfm?id=3143361.3143364},
	doi = {10.1145/3143361.3143364},
	urldate = {2018-12-18},
	publisher = {ACM},
	author = {Jajoo, Akshay and Gandhi, Rohan and Hu, Y. Charlie and Koh, Cheng-Kok},
	month = nov,
	year = {2017},
	pages = {439--450},
	file = {Jajoo et al. - 2017 - Saath Speeding up CoFlows by Exploiting the Spati.pdf:files/1007/Jajoo et al. - 2017 - Saath Speeding up CoFlows by Exploiting the Spati.pdf:application/pdf}
}

@inproceedings{agarwal_sincronia:_2018,
	address = {Budapest, Hungary},
	title = {Sincronia: near-optimal network design for coflows},
	isbn = {978-1-4503-5567-4},
	shorttitle = {Sincronia},
	url = {http://dl.acm.org/citation.cfm?doid=3230543.3230569},
	doi = {10.1145/3230543.3230569},
	abstract = {We present Sincronia, a near-optimal network design for coflows that can be implemented on top on any transport layer (for flows) that supports priority scheduling. Sincronia achieves this using a key technical result — we show that given a “right” ordering of coflows, any per-flow rate allocation mechanism achieves average coflow completion time within 4× of the optimal as long as (co)flows are prioritized with respect to the ordering.},
	language = {en},
	urldate = {2019-01-08},
	booktitle = {Proceedings of the 2018 {Conference} of the {ACM} {Special} {Interest} {Group} on {Data} {Communication}  - {SIGCOMM} '18},
	publisher = {ACM Press},
	author = {Agarwal, Saksham and Rajakrishnan, Shijin and Narayan, Akshay and Agarwal, Rachit and Shmoys, David and Vahdat, Amin},
	year = {2018},
	pages = {16--29},
	file = {Agarwal et al. - 2018 - Sincronia near-optimal network design for coflows.pdf:files/1347/Agarwal et al. - 2018 - Sincronia near-optimal network design for coflows.pdf:application/pdf}
}

@article{jahanjou_asymptotically_2016,
	title = {Asymptotically {Optimal} {Approximation} {Algorithms} for {Coflow} {Scheduling}},
	url = {http://arxiv.org/abs/1606.06183},
	abstract = {Many modern datacenter applications involve large-scale computations composed of multiple data flows that need to be completed over a shared set of distributed resources. Such a computation completes when all of its flows complete. A useful abstraction for modeling such scenarios is a \{{\textbackslash}em coflow\}, which is a collection of flows (e.g., tasks, packets, data transmissions) that all share the same performance goal. In this paper, we present the first approximation algorithms for scheduling coflows over general network topologies with the objective of minimizing total weighted completion time. We consider two different models for coflows based on the nature of individual flows: circuits, and packets. We design constant-factor polynomial-time approximation algorithms for scheduling packet-based coflows with or without given flow paths, and circuit-based coflows with given flow paths. Furthermore, we give an \$O({\textbackslash}log n/{\textbackslash}log {\textbackslash}log n)\$-approximation polynomial time algorithm for scheduling circuit-based coflows where flow paths are not given (here \$n\$ is the number of network edges). We obtain our results by developing a general framework for coflow schedules, based on interval-indexed linear programs, which may extend to other coflow models and objective functions and may also yield improved approximation bounds for specific network scenarios. We also present an experimental evaluation of our approach for circuit-based coflows that show a performance improvement of at least 22\% on average over competing heuristics.},
	urldate = {2019-01-10},
	journal = {arXiv:1606.06183 [cs]},
	author = {Jahanjou, Hamidreza and Kantor, Erez and Rajaraman, Rajmohan},
	month = jun,
	year = {2016},
	note = {arXiv: 1606.06183},
	keywords = {Computer Science - Distributed, Parallel, and Cluster Computing, Computer Science - Data Structures and Algorithms},
	annote = {Comment: Fixed minor typos},
	file = {arXiv\:1606.06183 PDF:files/1383/Jahanjou et al. - 2016 - Asymptotically Optimal Approximation Algorithms fo.pdf:application/pdf;arXiv.org Snapshot:files/1384/1606.html:text/html}
}

@article{khuller_select_2017,
	title = {Select and {Permute}: {An} {Improved} {Online} {Framework} for {Scheduling} to {Minimize} {Weighted} {Completion} {Time}},
	shorttitle = {Select and {Permute}},
	url = {http://arxiv.org/abs/1704.06677},
	abstract = {In this paper, we introduce a new online scheduling framework for minimizing total weighted completion time in a general setting. The framework is inspired by the work of Hall et al. [Mathematics of Operations Research, Vol 22(3):513-544, 1997] and Garg et al. [Proc. of Foundations of Software Technology and Theoretical Computer Science, pp. 96-107, 2007], who show how to convert an offline approximation to an online scheme. Our framework uses two offline approximation algorithms (one for the simpler problem of scheduling without release times, and another for the minimum unscheduled weight problem) to create an online algorithm with provably good competitive ratios. We illustrate multiple applications of this method that yield improved competitive ratios. Our framework gives algorithms with the best or only known competitive ratios for the concurrent open shop, coflow, and concurrent cluster models. We also introduce a randomized variant of our framework based on the ideas of Chakrabarti et al. [Proc. of International Colloquium on Automata, Languages, and Programming, pp. 646-657, 1996] and use it to achieve improved competitive ratios for these same problems.},
	urldate = {2019-01-10},
	journal = {arXiv:1704.06677 [cs]},
	author = {Khuller, Samir and Li, Jingling and Sturmfels, Pascal and Sun, Kevin and Venkat, Prayaag},
	month = apr,
	year = {2017},
	note = {arXiv: 1704.06677},
	keywords = {Computer Science - Data Structures and Algorithms},
	annote = {Comment: 17 pages},
	file = {arXiv\:1704.06677 PDF:files/1387/Khuller et al. - 2017 - Select and Permute An Improved Online Framework f.pdf:application/pdf;arXiv.org Snapshot:files/1388/1704.html:text/html}
}

@inproceedings{zhao_rapier:_2015,
	title = {Rapier: {Integrating} routing and scheduling for coflow-aware data center networks},
	shorttitle = {Rapier},
	doi = {10.1109/INFOCOM.2015.7218408},
	abstract = {In the data flow models of today's data center applications such as MapReduce, Spark and Dryad, multiple flows can comprise a coflow group semantically. Only completing all flows in a coflow is meaningful to an application. To optimize application performance, routing and scheduling must be jointly considered at the level of a coflow rather than individual flows. However, prior solutions have significant limitation: they only consider scheduling, which is insufficient. To this end, we present Rapier, a coflow-aware network optimization framework that seamlessly integrates routing and scheduling for better application performance. Using a small-scale testbed implementation and large-scale simulations, we demonstrate that Rapier significantly reduces the average coflow completion time (CCT) by up to 79.30\% compared to the state-of-the-art scheduling-only solution, and it is readily implementable with existing commodity switches.},
	booktitle = {2015 {IEEE} {Conference} on {Computer} {Communications} ({INFOCOM})},
	author = {Zhao, Y. and Chen, K. and Bai, W. and Yu, M. and Tian, C. and Geng, Y. and Zhang, Y. and Li, D. and Wang, S.},
	month = apr,
	year = {2015},
	keywords = {Algorithm design and analysis, Routing, Processor scheduling, optimisation, telecommunication network routing, Optimal scheduling, Bandwidth, computer centres, Approximation algorithms, telecommunication scheduling, Scheduling, coflow-aware data center networks, coflow-aware network optimization framework, RAPIER},
	pages = {424--432},
	file = {IEEE Xplore Abstract Record:files/1391/7218408.html:text/html}
}

@inproceedings{ghorbani_drill:_2017,
	address = {Los Angeles, CA, USA},
	title = {{DRILL}: {Micro} {Load} {Balancing} for {Low}-latency {Data} {Center} {Networks}},
	isbn = {978-1-4503-4653-5},
	shorttitle = {{DRILL}},
	url = {http://dl.acm.org/citation.cfm?doid=3098822.3098839},
	doi = {10.1145/3098822.3098839},
	abstract = {The trend towards simple datacenter network fabric strips most network functionality, including load balancing, out of the network core and pushes it to the edge. This slows reaction to microbursts, the main culprit of packet loss in datacenters. We investigate the opposite direction: could slightly smarter fabric significantly improve load balancing? This paper presents DRILL, a datacenter fabric for Clos networks which performs micro load balancing to distribute load as evenly as possible on microsecond timescales. DRILL employs perpacket decisions at each switch based on local queue occupancies and randomized algorithms to distribute load. Our design addresses the resulting key challenges of packet reordering and topological asymmetry. In simulations with a detailed switch hardware model and realistic workloads, DRILL outperforms recent edge-based load balancers, particularly under heavy load. Under 80\% load, for example, it achieves 1.3-1.4× lower mean flow completion time than recent proposals, primarily due to shorter upstream queues. To test hardware feasibility, we implement DRILL in Verilog and estimate its area overhead to be less than 1\%. Finally, we analyze DRILL’s stability and throughput-efficiency.},
	language = {en},
	urldate = {2019-01-10},
	booktitle = {Proceedings of the {Conference} of the {ACM} {Special} {Interest} {Group} on {Data} {Communication}  - {SIGCOMM} '17},
	publisher = {ACM Press},
	author = {Ghorbani, Soudeh and Yang, Zibin and Godfrey, P. Brighten and Ganjali, Yashar and Firoozshahian, Amin},
	year = {2017},
	pages = {225--238},
	file = {Ghorbani et al. - 2017 - DRILL Micro Load Balancing for Low-latency Data C.pdf:files/1392/Ghorbani et al. - 2017 - DRILL Micro Load Balancing for Low-latency Data C.pdf:application/pdf}
}

@article{wang_integrating_2019,
	title = {Integrating {Coflow} and {Circuit} {Scheduling} for {Optical} {Networks}},
	issn = {1045-9219},
	doi = {10.1109/TPDS.2018.2889251},
	abstract = {There are more and more structured traffic flows (a.k.a Coflow) in today's data center networks. Completing a coflow is extremely important for various applications, e.g., MapReduce [1] and Dryad [2]. To reduce the coflow completion time or CCT, one may increase the link capacity by applying advanced optical circuit switches in data center networks. Due to special features of optical circuit switches, both traffic scheduling and circuit scheduling will influence the CCT. However, previous solutions have some significant limitations: they either consider coflow scheduling, or consider circuit scheduling for only one optical circuit switch, which are both insufficient. In this paper, we study the integrated coflow and circuit scheduling (GCCS) problem with the objective to minimize the CCT, and prove its NP-hardness. We present an integrated algorithm which includes two steps, coflow scheduling and circuit scheduling, respectively. We also analyze that the proposed algorithm can achieve the approximation ratio O(h) in most practical situations, where h is the maximum number of ports among all lightpaths. Through large-scale simulations, we demonstrate that the integrated solution can significantly reduce the CCT by about 43-70\% compared with the state-of-the-art coflow scheduler for optical networks.},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	author = {Wang, H. and Yu, X. and Xu, H. and Fan, J. and Qiao, C. and Huang, L.},
	year = {2019},
	keywords = {Scheduling, Optical fiber networks, Optical packet switching, Optical buffering, Optical switches, Approximation, Circuit Scheduling, Coflow Scheduling, Optical networks},
	pages = {1--1},
	file = {IEEE Xplore Full Text PDF:files/1395/Wang et al. - 2019 - Integrating Coflow and Circuit Scheduling for Opti.pdf:application/pdf}
}

@inproceedings{liang_coflow_2017,
	title = {Coflow scheduling in input-queued switches: {Optimal} delay scaling and algorithms},
	shorttitle = {Coflow scheduling in input-queued switches},
	doi = {10.1109/INFOCOM.2017.8057171},
	abstract = {A coflow is a collection of parallel flows belonging to the same job. It has the all-or-nothing property: a coflow is not complete until the completion of all its constituent flows. In this paper, we focus on optimizing coflow-level delay, i.e., the time to complete all the flows in a coflow, in the context of an N × N input-queued switch. In particular, we develop a throughput-optimal scheduling policy that achieves the best scaling of coflow-level delay as N → ∞. We first derive lower bounds on the coflow-level delay that can be achieved by any scheduling policy. It is observed that these lower bounds critically depend on the variability of flow sizes. Then we analyze the coflow-level performance of some existing coflow-agnostic scheduling policies and show that none of them achieves provably optimal performance with respect to coflow-level delay. Finally, we propose the Coflow-Aware Batching (CAB) policy which achieves the optimal scaling of coflow-level delay under some mild assumptions.},
	booktitle = {{IEEE} {INFOCOM} 2017 - {IEEE} {Conference} on {Computer} {Communications}},
	author = {Liang, Q. and Modiano, E.},
	month = may,
	year = {2017},
	keywords = {queueing theory, scheduling, Processor scheduling, optimisation, Optimal scheduling, delays, Ports (Computers), Delays, telecommunication scheduling, Scheduling, CAB policy, coflow-agnostic scheduling policies, Coflow-Aware Batching policy, coflow-level delay, coflow-level performance, computer networks, Optimal delay scaling, throughput-optimal scheduling policy},
	pages = {1--9},
	file = {IEEE Xplore Full Text PDF:files/1398/Liang and Modiano - 2017 - Coflow scheduling in input-queued switches Optima.pdf:application/pdf}
}